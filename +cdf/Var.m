classdef Var < handle
% Represents an individual variable from a CDF file

% Static data
properties (Constant = true, Access = public)
	% CDF_TT2000  is not avalable to matlab, this will be a problem
	
	g_lTypesMl2Cdf = containers.Map(...
		{...
			'char','string','int8','uint8','int16',...
			'uint16','int32','uint32','single','double',...
			'datetime'...
		}, ...
		{...
			'CDF_CHAR','CDF_CHAR','CDF_INT1','CDF_UINT1','CDF_INT2',...
			'CDF_UINT2','CDF_INT4','CDF_UINT4','CDF_FLOAT','CDF_DOUBLE',...
			'CDF_EPOCH'...
		}...
	);
	
	% CDF have multiple names for the same type
	g_lTypesCdf2Ml = containers.Map(...
		{...
			'CDF_CHAR',  'CDF_INT1',  'CDF_BYTE',   'CDF_UINT1', 'CDF_UCHAR', ...
			'CDF_INT2',  'CDF_UINT2', 'CDF_INT4',   'CDF_UINT4', 'CDF_REAL4', ...
			'CDF_FLOAT', 'CDF_REAL8', 'CDF_DOUBLE', 'CDF_EPOCH'...
		},...
		{...
			'char',   'int8',   'int8',   'uint8',  'uint8',  ...
			'int16',  'uint16', 'int32',  'uint32', 'single', ...
			'single', 'double', 'double', 'datetime'...
		} ...
	);
	
end

properties
	nCdfId   % The associated CDF file ID, -1 if not association
	nId      % Variable CDF file ID, is -1 in memory only vars
	attr     % Attribute map for this variable
	cCdfType % CDF data type
	data     % The actual data array
	rank     % Out-of-band helper for trailing dimensions of length 1
end

methods (Access = public)
	
	function self = Var(nCdfId)
		% CDF Variable object constructor
		self.nId = int32(-1);
		self.nCdfId = nCdfId;
		self.attr = containers.Map();
		self.cCdfType = 'CDF_REAL8'; 
		self.data = [];
		self.rank = 0;  % 0 = unknown, used when matlab drops trailing dims.
	end
	
	function self = setAttrs(self, lAttr)
		% Set one or more attributes of a variable
		i = 1;
		while i <= numel(lAttr)
			cAttr = lAttr{i};
			if ~ischar(cAttr)
				throw(MException(...
					'cdf:Var:invalidInput', ...
					'Expected a character attribute name or CDF type string' ...
				));
			end
			
			if strcmpi(cAttr(1:4), 'cdf_')
				if ~self.g_lTypesCdf2Ml.isKey(cAttr) 
					throw(MExecption(...
						'cdf:Var:invalidInput', 'Unknown CDF data type %s', cAttr ...
					));
				else
					self.cCdfType = upper(cAttr);
					i = i + 1;
				end
			else
				if i == numel(lAttr)
					throw(MException('cdf:Var:invalidInput',...
						'Attribute value missing after %s', cAttr...
					));
				end
				self.attr(cAttr) = lAttr{i+1};
				i = i + 2;
			end
		end
	end
	
end

end
